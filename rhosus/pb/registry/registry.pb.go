// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: registry.proto

package registry_pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Command_CommandType int32

const (
	Command_PING Command_CommandType = 0
)

var Command_CommandType_name = map[int32]string{
	0: "PING",
}

var Command_CommandType_value = map[string]int32{
	"PING": 0,
}

func (x Command_CommandType) String() string {
	return proto.EnumName(Command_CommandType_name, int32(x))
}

func (Command_CommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{0, 0}
}

type RegistryInfo_RegistryRole int32

const (
	RegistryInfo_REGISTRY RegistryInfo_RegistryRole = 0
	RegistryInfo_BACKUP   RegistryInfo_RegistryRole = 1
)

var RegistryInfo_RegistryRole_name = map[int32]string{
	0: "REGISTRY",
	1: "BACKUP",
}

var RegistryInfo_RegistryRole_value = map[string]int32{
	"REGISTRY": 0,
	"BACKUP":   1,
}

func (x RegistryInfo_RegistryRole) String() string {
	return proto.EnumName(RegistryInfo_RegistryRole_name, int32(x))
}

func (RegistryInfo_RegistryRole) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{1, 0}
}

type Command struct {
	Type                 Command_CommandType `protobuf:"varint,1,opt,name=type,proto3,enum=registry_pb.Command_CommandType" json:"type,omitempty"`
	Data                 []byte              `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{0}
}
func (m *Command) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return m.Size()
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetType() Command_CommandType {
	if m != nil {
		return m.Type
	}
	return Command_PING
}

func (m *Command) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RegistryInfo struct {
	Uid                  string                    `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	RpcAddress           string                    `protobuf:"bytes,2,opt,name=rpcAddress,proto3" json:"rpcAddress,omitempty"`
	HttpAddress          string                    `protobuf:"bytes,3,opt,name=httpAddress,proto3" json:"httpAddress,omitempty"`
	Role                 RegistryInfo_RegistryRole `protobuf:"varint,4,opt,name=role,proto3,enum=registry_pb.RegistryInfo_RegistryRole" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *RegistryInfo) Reset()         { *m = RegistryInfo{} }
func (m *RegistryInfo) String() string { return proto.CompactTextString(m) }
func (*RegistryInfo) ProtoMessage()    {}
func (*RegistryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_41af05d40a615591, []int{1}
}
func (m *RegistryInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistryInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryInfo.Merge(m, src)
}
func (m *RegistryInfo) XXX_Size() int {
	return m.Size()
}
func (m *RegistryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryInfo proto.InternalMessageInfo

func (m *RegistryInfo) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *RegistryInfo) GetRpcAddress() string {
	if m != nil {
		return m.RpcAddress
	}
	return ""
}

func (m *RegistryInfo) GetHttpAddress() string {
	if m != nil {
		return m.HttpAddress
	}
	return ""
}

func (m *RegistryInfo) GetRole() RegistryInfo_RegistryRole {
	if m != nil {
		return m.Role
	}
	return RegistryInfo_REGISTRY
}

func init() {
	proto.RegisterEnum("registry_pb.Command_CommandType", Command_CommandType_name, Command_CommandType_value)
	proto.RegisterEnum("registry_pb.RegistryInfo_RegistryRole", RegistryInfo_RegistryRole_name, RegistryInfo_RegistryRole_value)
	proto.RegisterType((*Command)(nil), "registry_pb.Command")
	proto.RegisterType((*RegistryInfo)(nil), "registry_pb.RegistryInfo")
}

func init() { proto.RegisterFile("registry.proto", fileDescriptor_41af05d40a615591) }

var fileDescriptor_41af05d40a615591 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xbf, 0x6a, 0xf3, 0x30,
	0x14, 0xc5, 0xa3, 0x2f, 0x26, 0x5f, 0x72, 0x13, 0x82, 0xd1, 0x52, 0x4f, 0xc6, 0x78, 0x28, 0x9e,
	0x6c, 0x48, 0x3b, 0x75, 0x4b, 0xd2, 0x12, 0x4c, 0xa1, 0x04, 0x35, 0x1d, 0xda, 0xa5, 0xf8, 0x8f,
	0x1a, 0x1b, 0xec, 0x48, 0x48, 0xf2, 0xe0, 0x37, 0xe9, 0x23, 0x65, 0xec, 0x23, 0x14, 0xf7, 0x45,
	0x4a, 0x44, 0xdc, 0xaa, 0xd3, 0xbd, 0xf7, 0xf0, 0xd3, 0xbd, 0xe7, 0x20, 0x98, 0x0b, 0xba, 0x2f,
	0xa5, 0x12, 0x6d, 0xc8, 0x05, 0x53, 0x0c, 0x4f, 0xfb, 0xf9, 0x95, 0xa7, 0x7e, 0x05, 0xff, 0xd7,
	0xac, 0xae, 0x93, 0x43, 0x8e, 0xaf, 0xc1, 0x52, 0x2d, 0xa7, 0x0e, 0xf2, 0x50, 0x30, 0x5f, 0x78,
	0xa1, 0x81, 0x85, 0x67, 0xa6, 0xaf, 0xbb, 0x96, 0x53, 0xa2, 0x69, 0x8c, 0xc1, 0xca, 0x13, 0x95,
	0x38, 0xff, 0x3c, 0x14, 0xcc, 0x88, 0xee, 0xfd, 0x0b, 0x98, 0x1a, 0x20, 0x1e, 0x83, 0xb5, 0x8d,
	0x1f, 0x36, 0xf6, 0xc0, 0x3f, 0x22, 0x98, 0x91, 0xf3, 0xda, 0xf8, 0xf0, 0xc6, 0xb0, 0x0d, 0xc3,
	0xa6, 0xcc, 0xf5, 0xc9, 0x09, 0x39, 0xb5, 0xd8, 0x05, 0x10, 0x3c, 0x5b, 0xe6, 0xb9, 0xa0, 0x52,
	0xea, 0xad, 0x13, 0x62, 0x28, 0xd8, 0x83, 0x69, 0xa1, 0x14, 0xef, 0x81, 0xa1, 0x06, 0x4c, 0x09,
	0xdf, 0x80, 0x25, 0x58, 0x45, 0x1d, 0x4b, 0xe7, 0xb8, 0xfc, 0x93, 0xc3, 0x3c, 0xfe, 0x33, 0x10,
	0x56, 0x51, 0xa2, 0xdf, 0xf8, 0xc1, 0xaf, 0xbf, 0x93, 0x8a, 0x67, 0x30, 0x26, 0x77, 0x9b, 0xf8,
	0x71, 0x47, 0x9e, 0xed, 0x01, 0x06, 0x18, 0xad, 0x96, 0xeb, 0xfb, 0xa7, 0xad, 0x8d, 0x56, 0xb7,
	0xc7, 0xce, 0x45, 0x1f, 0x9d, 0x8b, 0x3e, 0x3b, 0x17, 0xbd, 0x7f, 0xb9, 0x83, 0x97, 0xc5, 0xbe,
	0x54, 0x45, 0x93, 0x86, 0x19, 0xab, 0x23, 0x9e, 0x88, 0x44, 0xb2, 0x46, 0x64, 0x34, 0x12, 0x05,
	0x93, 0x8d, 0xec, 0x0b, 0x4f, 0x23, 0xc3, 0x4f, 0x3a, 0xd2, 0x5f, 0x72, 0xf5, 0x1d, 0x00, 0x00,
	0xff, 0xff, 0x9c, 0x09, 0xc5, 0x0c, 0xa4, 0x01, 0x00, 0x00,
}

func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegistryInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Role != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x20
	}
	if len(m.HttpAddress) > 0 {
		i -= len(m.HttpAddress)
		copy(dAtA[i:], m.HttpAddress)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.HttpAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RpcAddress) > 0 {
		i -= len(m.RpcAddress)
		copy(dAtA[i:], m.RpcAddress)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.RpcAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRegistry(dAtA []byte, offset int, v uint64) int {
	offset -= sovRegistry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Command) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRegistry(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegistryInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.RpcAddress)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.HttpAddress)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovRegistry(uint64(m.Role))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRegistry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRegistry(x uint64) (n int) {
	return sovRegistry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Command_CommandType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= RegistryInfo_RegistryRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegistry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRegistry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRegistry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRegistry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRegistry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegistry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRegistry = fmt.Errorf("proto: unexpected end of group")
)
