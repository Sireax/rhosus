// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package node_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeDiscoveryServiceClient is the client API for NodeDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeDiscoveryServiceClient interface {
	DiscoverNode(ctx context.Context, in *NodeDiscoveryRequest, opts ...grpc.CallOption) (*NodeDiscoveryResponse, error)
	RemoveNode(ctx context.Context, in *NodeRemovalRequest, opts ...grpc.CallOption) (*NodeRemovalResponse, error)
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error)
	UpdateMetrics(ctx context.Context, in *UpdateMetricsRequest, opts ...grpc.CallOption) (*UpdateMetricsResponse, error)
}

type nodeDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeDiscoveryServiceClient(cc grpc.ClientConnInterface) NodeDiscoveryServiceClient {
	return &nodeDiscoveryServiceClient{cc}
}

func (c *nodeDiscoveryServiceClient) DiscoverNode(ctx context.Context, in *NodeDiscoveryRequest, opts ...grpc.CallOption) (*NodeDiscoveryResponse, error) {
	out := new(NodeDiscoveryResponse)
	err := c.cc.Invoke(ctx, "/node_proto.NodeDiscoveryService/DiscoverNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeDiscoveryServiceClient) RemoveNode(ctx context.Context, in *NodeRemovalRequest, opts ...grpc.CallOption) (*NodeRemovalResponse, error) {
	out := new(NodeRemovalResponse)
	err := c.cc.Invoke(ctx, "/node_proto.NodeDiscoveryService/RemoveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeDiscoveryServiceClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	out := new(GetNodesResponse)
	err := c.cc.Invoke(ctx, "/node_proto.NodeDiscoveryService/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeDiscoveryServiceClient) UpdateMetrics(ctx context.Context, in *UpdateMetricsRequest, opts ...grpc.CallOption) (*UpdateMetricsResponse, error) {
	out := new(UpdateMetricsResponse)
	err := c.cc.Invoke(ctx, "/node_proto.NodeDiscoveryService/UpdateMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeDiscoveryServiceServer is the server API for NodeDiscoveryService service.
// All implementations must embed UnimplementedNodeDiscoveryServiceServer
// for forward compatibility
type NodeDiscoveryServiceServer interface {
	DiscoverNode(context.Context, *NodeDiscoveryRequest) (*NodeDiscoveryResponse, error)
	RemoveNode(context.Context, *NodeRemovalRequest) (*NodeRemovalResponse, error)
	GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error)
	UpdateMetrics(context.Context, *UpdateMetricsRequest) (*UpdateMetricsResponse, error)
	mustEmbedUnimplementedNodeDiscoveryServiceServer()
}

// UnimplementedNodeDiscoveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeDiscoveryServiceServer struct {
}

func (UnimplementedNodeDiscoveryServiceServer) DiscoverNode(context.Context, *NodeDiscoveryRequest) (*NodeDiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverNode not implemented")
}
func (UnimplementedNodeDiscoveryServiceServer) RemoveNode(context.Context, *NodeRemovalRequest) (*NodeRemovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNode not implemented")
}
func (UnimplementedNodeDiscoveryServiceServer) GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedNodeDiscoveryServiceServer) UpdateMetrics(context.Context, *UpdateMetricsRequest) (*UpdateMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetrics not implemented")
}
func (UnimplementedNodeDiscoveryServiceServer) mustEmbedUnimplementedNodeDiscoveryServiceServer() {}

// UnsafeNodeDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeDiscoveryServiceServer will
// result in compilation errors.
type UnsafeNodeDiscoveryServiceServer interface {
	mustEmbedUnimplementedNodeDiscoveryServiceServer()
}

func RegisterNodeDiscoveryServiceServer(s grpc.ServiceRegistrar, srv NodeDiscoveryServiceServer) {
	s.RegisterService(&NodeDiscoveryService_ServiceDesc, srv)
}

func _NodeDiscoveryService_DiscoverNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeDiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeDiscoveryServiceServer).DiscoverNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node_proto.NodeDiscoveryService/DiscoverNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeDiscoveryServiceServer).DiscoverNode(ctx, req.(*NodeDiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeDiscoveryService_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRemovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeDiscoveryServiceServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node_proto.NodeDiscoveryService/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeDiscoveryServiceServer).RemoveNode(ctx, req.(*NodeRemovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeDiscoveryService_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeDiscoveryServiceServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node_proto.NodeDiscoveryService/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeDiscoveryServiceServer).GetNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeDiscoveryService_UpdateMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeDiscoveryServiceServer).UpdateMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node_proto.NodeDiscoveryService/UpdateMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeDiscoveryServiceServer).UpdateMetrics(ctx, req.(*UpdateMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeDiscoveryService_ServiceDesc is the grpc.ServiceDesc for NodeDiscoveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeDiscoveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "node_proto.NodeDiscoveryService",
	HandlerType: (*NodeDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiscoverNode",
			Handler:    _NodeDiscoveryService_DiscoverNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _NodeDiscoveryService_RemoveNode_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _NodeDiscoveryService_GetNodes_Handler,
		},
		{
			MethodName: "UpdateMetrics",
			Handler:    _NodeDiscoveryService_UpdateMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
