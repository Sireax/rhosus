syntax = "proto3";

package control_pb;
option go_package = "github.com/parasource/rhosus/rhosus/pb/control_pb";

import "fs.proto";

// <---------------------------------->
// Control service is an implementation
// of a RAFT consensus algorithm.
// <---------------------------------->

service Control {
  rpc RequestVote (RequestVoteRequest) returns (RequestVoteResponse);
  rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse);
  rpc EntryCommitted (EntryCommittedRequest) returns (EntryCommittedResponse);
  rpc Shutdown (Void) returns (Void) {}
  rpc Alive (Void) returns (Void) {}
  rpc Offline (Void) returns (Void) {}
  rpc Online (Void) returns (Void) {}
}

message Void {

}

message RequestVoteRequest {
  uint32 term = 1;
  string candidateUid = 2;
  int64 lastLogIndex = 3;
  uint32 lastLogTerm = 4;
}

message RequestVoteResponse {
  string from = 1;
  string term = 2;
  uint32 voteGranted = 3;
}

message AppendEntriesRequest {
  uint32 term = 1;
  string leaderUid = 2;
  int64 prevLogIndex = 3;
  uint32 prevLogTerm = 4;
  repeated Entry entries = 6;
  bool leaderCommit = 7;
}

message AppendEntriesResponse {
  string from = 1;
  uint32 term = 2;
  uint32 success = 3;
  int64 lastAgreedIndex = 4;
}

message EntryCommittedRequest {
  uint32 term = 1;
}

message EntryCommittedResponse {

}

message Entry {
  int64 index = 1;
  uint32 term = 2;
  enum Type {
    ASSIGN = 0;
    DELETE = 1;
  }
  Type type = 3;

  // data is a marshalled one of the above types message
  bytes data = 4;
  int64 timestamp = 5;

  // magic number ;)
  float version = 69;
}

message OffsetRange {
  uint64 from = 1;
  uint64 to = 2;
}

message EntryAssign {
  string nodeUid = 1;
  map<string, OffsetRange> blocks = 2;
}

message EntryDelete {
  string nodeUid = 1;
  repeated string blocks = 2;
}

// <------------------------->
// Main registry communication
// messages
// <------------------------->

message RegistryInfo {
  string uid = 1;
  string name = 2;
  message Address {
    string host = 1;
    string port = 2;
    string username = 3;
    string password = 4;
  }
  Address address = 3;
}

message Event {
  enum EventType {
    FILE_REGISTERED = 0;
    FILE_DELETED = 1;
    FILE_MODIFIED = 2;

    REGISTRY_SHUTDOWN = 3;
  }
  EventType type = 1;
  bytes data = 2;
}

message EventFileRegistered {
  string uid = 1;
  fs_pb.File file = 2;
}

message EventFileDeleted {
  string uid = 1;
  fs_pb.File file = 2;
}

message EventFileModified {
  string uid = 1;
  fs_pb.File file = 2;
}

message EventRegistryShutdown {
  string uid = 1;
  enum ShutdownReason {
    FORCE = 0;
    FATAL_ERROR = 1;
  }
  ShutdownReason reason = 2;
}

message FileInfo {
  enum FileType {
    DIR = 0;
    FILE = 1;
    SYMLINK = 3;
  }
  FileType type = 1;
  bytes path = 2;
  uint64 length = 3;
  message FsPermission {
    uint32 perm = 1;
  }
  FsPermission permission = 4;
  string owner = 5;
  string group = 6;

  bytes symlink = 7; // Optional. Used only for symlinks
}

message DirectoryListing {
  repeated FileInfo listing = 1;
  uint32 remainingPages = 2;
}
