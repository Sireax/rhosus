syntax = "proto3";

package control_pb;
option go_package = "github.com/parasource/rhosus/rhosus/pb/control_pb";

// <---------------------------------->
// Control service is an implementation
// of a RAFT consensus algorithm.
// <---------------------------------->

service Control {
  rpc RequestVote (RequestVoteRequest) returns (RequestVoteResponse);
  rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse);
  rpc Shutdown (Void) returns (Void) {}
  rpc Alive (Void) returns (Void) {}
  rpc Offline (Void) returns (Void) {}
  rpc Online (Void) returns (Void) {}
}

message Void {

}

enum State {
  LEADER = 0;
  CANDIDATE = 1;
  FOLLOWER = 2;
}

message RequestVoteRequest {
  uint32 term = 1;
  string candidateId = 2;
  uint64 lastLogIndex = 3;
  uint32 lastLogTerm = 4;
}

message RequestVoteResponse {
  string from = 1;
  uint32 term = 2;
  bool voteGranted = 3;
}

message AppendEntriesRequest {
  uint32 term = 1;
  string leaderId = 2;
  int64 prevLogIndex = 3;
  uint32 prevLogTerm = 4;
  repeated Entry entries = 6;
  bool leaderCommit = 7;
}

message AppendEntriesResponse {
  string from = 1;
  uint32 term = 2;
  bool success = 3;
  uint64 lastAgreedIndex = 4;
  uint64 lastCommittedIndex = 5;
}

message Entry {
  uint64 index = 1;
  uint32 term = 2;
  enum Type {
    ASSIGN_FILE = 0;
    DELETE_FILE = 1;
    ASSIGN_BLOCKS = 3;
    DELETE_BLOCKS = 4;
  }
  Type type = 3;

  // data is a marshalled one of the above types message
  bytes data = 4;
  int64 timestamp = 5;

  float version = 99;
}


message EntryAssignFile {
  string nodeId = 1;
  FileInfo file = 2;
}

message EntryDeleteFile {
  string nodeId = 1;
  FileInfo file = 2;
}

message EntryAssignBlocks {
  string nodeId = 1;
  repeated BlockInfo blocks = 2;
  string rack = 3;
}

message EntryDeleteBlocks {
  string nodeId = 1;
  repeated BlockInfo blocks = 2;
}

// <------------------------->
// Main registry types
// <------------------------->

message RegistryInfo {
  string Id = 1;
  string name = 2;
  string address = 3;
}

message FileInfo {
  enum FileType {
    DIR = 0;
    FILE = 1;
    SYMLINK = 3;
  }
  string id = 1;
  string parentID = 2;
  FileType type = 3;
  string name = 4;
  string path = 5;
  uint64 size = 6;
  message FsPermission {
    uint32 perm = 1;
  }
  FsPermission permission = 7;
  string owner = 8;
  string group = 9;
  string symlink = 10; // Optional. Used only for symlinks
  int32 replication = 11; // replication factor
}

// Partition is a set of blocks
// partition can be transferred to another node for load balancing
message Partition {
  string id = 1;
  uint64 usedSpace = 2;
  map<string, BlockInfo> blocks = 3;
  enum ChecksumType {
    CHECKSUM_NULL = 0;
    CHECKSUM_CRC32 = 1;
    CHECKSUM_CRC32C = 2;
  }
  ChecksumType checksum_type = 4;
  string checksum = 5;
  int64 updated_at = 6;
}

message BlockInfo {
  string id = 1;
  uint64 index = 2; // position in source file
  int64 size = 3;
  string fileID = 4;
  message Placement {
    string nodeID = 1;
    string partitionID = 2;
  }
  repeated Placement blocks = 5;
}

message DirectoryListing {
  repeated FileInfo listing = 1;
  uint32 remainingPages = 2;
}


// User types

message Role {
  string ID = 1;
  string name = 2;
  repeated string permissions = 3;
  string password = 4;
}

message Token {
  string roleID = 1;
  string method = 2;
  string token = 3;
  int64 valid_until = 4;
}