// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: journal.proto

package journal_pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type JournalRecord_Type int32

const (
	JournalRecord_ASSIGN JournalRecord_Type = 0
	JournalRecord_DELETE JournalRecord_Type = 1
)

var JournalRecord_Type_name = map[int32]string{
	0: "ASSIGN",
	1: "DELETE",
}

var JournalRecord_Type_value = map[string]int32{
	"ASSIGN": 0,
	"DELETE": 1,
}

func (x JournalRecord_Type) String() string {
	return proto.EnumName(JournalRecord_Type_name, int32(x))
}

func (JournalRecord_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_04fd98cceb1b9191, []int{0, 0}
}

type JournalRecord struct {
	Uid  *JournalRecord_UID `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Type JournalRecord_Type `protobuf:"varint,2,opt,name=type,proto3,enum=journal_pb.JournalRecord_Type" json:"type,omitempty"`
	// data is a marshalled one of the above types message
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Timestamp            int64    `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JournalRecord) Reset()         { *m = JournalRecord{} }
func (m *JournalRecord) String() string { return proto.CompactTextString(m) }
func (*JournalRecord) ProtoMessage()    {}
func (*JournalRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_04fd98cceb1b9191, []int{0}
}
func (m *JournalRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JournalRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JournalRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JournalRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JournalRecord.Merge(m, src)
}
func (m *JournalRecord) XXX_Size() int {
	return m.Size()
}
func (m *JournalRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_JournalRecord.DiscardUnknown(m)
}

var xxx_messageInfo_JournalRecord proto.InternalMessageInfo

func (m *JournalRecord) GetUid() *JournalRecord_UID {
	if m != nil {
		return m.Uid
	}
	return nil
}

func (m *JournalRecord) GetType() JournalRecord_Type {
	if m != nil {
		return m.Type
	}
	return JournalRecord_ASSIGN
}

func (m *JournalRecord) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *JournalRecord) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type JournalRecord_UID struct {
	Clock                uint64   `protobuf:"varint,2,opt,name=clock,proto3" json:"clock,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JournalRecord_UID) Reset()         { *m = JournalRecord_UID{} }
func (m *JournalRecord_UID) String() string { return proto.CompactTextString(m) }
func (*JournalRecord_UID) ProtoMessage()    {}
func (*JournalRecord_UID) Descriptor() ([]byte, []int) {
	return fileDescriptor_04fd98cceb1b9191, []int{0, 0}
}
func (m *JournalRecord_UID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JournalRecord_UID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JournalRecord_UID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JournalRecord_UID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JournalRecord_UID.Merge(m, src)
}
func (m *JournalRecord_UID) XXX_Size() int {
	return m.Size()
}
func (m *JournalRecord_UID) XXX_DiscardUnknown() {
	xxx_messageInfo_JournalRecord_UID.DiscardUnknown(m)
}

var xxx_messageInfo_JournalRecord_UID proto.InternalMessageInfo

func (m *JournalRecord_UID) GetClock() uint64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

type OffsetRange struct {
	From                 uint64   `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   uint64   `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OffsetRange) Reset()         { *m = OffsetRange{} }
func (m *OffsetRange) String() string { return proto.CompactTextString(m) }
func (*OffsetRange) ProtoMessage()    {}
func (*OffsetRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_04fd98cceb1b9191, []int{1}
}
func (m *OffsetRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OffsetRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OffsetRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OffsetRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OffsetRange.Merge(m, src)
}
func (m *OffsetRange) XXX_Size() int {
	return m.Size()
}
func (m *OffsetRange) XXX_DiscardUnknown() {
	xxx_messageInfo_OffsetRange.DiscardUnknown(m)
}

var xxx_messageInfo_OffsetRange proto.InternalMessageInfo

func (m *OffsetRange) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *OffsetRange) GetTo() uint64 {
	if m != nil {
		return m.To
	}
	return 0
}

type JournalAssign struct {
	NodeUid              string                  `protobuf:"bytes,1,opt,name=nodeUid,proto3" json:"nodeUid,omitempty"`
	Blocks               map[string]*OffsetRange `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *JournalAssign) Reset()         { *m = JournalAssign{} }
func (m *JournalAssign) String() string { return proto.CompactTextString(m) }
func (*JournalAssign) ProtoMessage()    {}
func (*JournalAssign) Descriptor() ([]byte, []int) {
	return fileDescriptor_04fd98cceb1b9191, []int{2}
}
func (m *JournalAssign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JournalAssign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JournalAssign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JournalAssign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JournalAssign.Merge(m, src)
}
func (m *JournalAssign) XXX_Size() int {
	return m.Size()
}
func (m *JournalAssign) XXX_DiscardUnknown() {
	xxx_messageInfo_JournalAssign.DiscardUnknown(m)
}

var xxx_messageInfo_JournalAssign proto.InternalMessageInfo

func (m *JournalAssign) GetNodeUid() string {
	if m != nil {
		return m.NodeUid
	}
	return ""
}

func (m *JournalAssign) GetBlocks() map[string]*OffsetRange {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type JournalDelete struct {
	NodeUid              string   `protobuf:"bytes,1,opt,name=nodeUid,proto3" json:"nodeUid,omitempty"`
	Blocks               []string `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JournalDelete) Reset()         { *m = JournalDelete{} }
func (m *JournalDelete) String() string { return proto.CompactTextString(m) }
func (*JournalDelete) ProtoMessage()    {}
func (*JournalDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_04fd98cceb1b9191, []int{3}
}
func (m *JournalDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JournalDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JournalDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JournalDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JournalDelete.Merge(m, src)
}
func (m *JournalDelete) XXX_Size() int {
	return m.Size()
}
func (m *JournalDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_JournalDelete.DiscardUnknown(m)
}

var xxx_messageInfo_JournalDelete proto.InternalMessageInfo

func (m *JournalDelete) GetNodeUid() string {
	if m != nil {
		return m.NodeUid
	}
	return ""
}

func (m *JournalDelete) GetBlocks() []string {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func init() {
	proto.RegisterEnum("journal_pb.JournalRecord_Type", JournalRecord_Type_name, JournalRecord_Type_value)
	proto.RegisterType((*JournalRecord)(nil), "journal_pb.JournalRecord")
	proto.RegisterType((*JournalRecord_UID)(nil), "journal_pb.JournalRecord.UID")
	proto.RegisterType((*OffsetRange)(nil), "journal_pb.OffsetRange")
	proto.RegisterType((*JournalAssign)(nil), "journal_pb.JournalAssign")
	proto.RegisterMapType((map[string]*OffsetRange)(nil), "journal_pb.JournalAssign.BlocksEntry")
	proto.RegisterType((*JournalDelete)(nil), "journal_pb.JournalDelete")
}

func init() { proto.RegisterFile("journal.proto", fileDescriptor_04fd98cceb1b9191) }

var fileDescriptor_04fd98cceb1b9191 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xd1, 0x6a, 0xd4, 0x40,
	0x14, 0xed, 0x24, 0xe9, 0xca, 0xde, 0xd8, 0xb2, 0x0c, 0xa2, 0xa1, 0x6a, 0x08, 0x01, 0x21, 0x2f,
	0x66, 0x69, 0x7c, 0x11, 0xc1, 0x87, 0xad, 0x1b, 0x64, 0x45, 0x14, 0xa6, 0xdd, 0x17, 0x5f, 0x64,
	0x92, 0xcc, 0x6e, 0x63, 0x93, 0x4c, 0x98, 0x99, 0x08, 0xf9, 0x13, 0x3f, 0xc6, 0x0f, 0xf0, 0xd1,
	0x4f, 0x90, 0xed, 0x8f, 0x48, 0x26, 0x59, 0xb3, 0x05, 0xf5, 0x29, 0xe7, 0x0c, 0xe7, 0x9e, 0x7b,
	0xee, 0x21, 0x70, 0xf2, 0x85, 0x37, 0xa2, 0xa2, 0x45, 0x58, 0x0b, 0xae, 0x38, 0x86, 0x81, 0x7e,
	0xae, 0x13, 0xff, 0x16, 0xc1, 0xc9, 0xbb, 0x9e, 0x12, 0x96, 0x72, 0x91, 0xe1, 0x39, 0x98, 0x4d,
	0x9e, 0x39, 0xc8, 0x43, 0x81, 0x1d, 0x3d, 0x0d, 0x47, 0x6d, 0x78, 0x47, 0x17, 0xae, 0x57, 0x4b,
	0xd2, 0x29, 0x71, 0x04, 0x96, 0x6a, 0x6b, 0xe6, 0x18, 0x1e, 0x0a, 0x4e, 0x23, 0xf7, 0xdf, 0x13,
	0x57, 0x6d, 0xcd, 0x88, 0xd6, 0x62, 0x0c, 0x56, 0x46, 0x15, 0x75, 0x4c, 0x0f, 0x05, 0xf7, 0x89,
	0xc6, 0xf8, 0x09, 0x4c, 0x55, 0x5e, 0x32, 0xa9, 0x68, 0x59, 0x3b, 0x96, 0x87, 0x02, 0x93, 0x8c,
	0x0f, 0x67, 0x8f, 0xc1, 0x5c, 0xaf, 0x96, 0xf8, 0x01, 0x1c, 0xa7, 0x05, 0x4f, 0x6f, 0xf4, 0x36,
	0x8b, 0xf4, 0xc4, 0x77, 0xc1, 0xea, 0xcc, 0x31, 0xc0, 0x64, 0x71, 0x79, 0xb9, 0x7a, 0xfb, 0x61,
	0x76, 0xd4, 0xe1, 0x65, 0xfc, 0x3e, 0xbe, 0x8a, 0x67, 0xc8, 0x3f, 0x07, 0xfb, 0xe3, 0x66, 0x23,
	0x99, 0x22, 0xb4, 0xda, 0xea, 0xed, 0x1b, 0xc1, 0x4b, 0x7d, 0xa3, 0x45, 0x34, 0xc6, 0xa7, 0x60,
	0x28, 0x3e, 0xb8, 0x1a, 0x8a, 0xfb, 0xdf, 0xc7, 0x62, 0x16, 0x52, 0xe6, 0xdb, 0x0a, 0x3b, 0x70,
	0xaf, 0xe2, 0x19, 0x5b, 0x0f, 0xe5, 0x4c, 0xc9, 0x9e, 0xe2, 0xd7, 0x30, 0x49, 0xba, 0x1c, 0xd2,
	0x31, 0x3c, 0x33, 0xb0, 0xa3, 0x67, 0x7f, 0xe9, 0xa0, 0x37, 0x09, 0x2f, 0xb4, 0x2e, 0xae, 0x94,
	0x68, 0xc9, 0x30, 0x74, 0x46, 0xc0, 0x3e, 0x78, 0xc6, 0x33, 0x30, 0x6f, 0x58, 0x3b, 0xec, 0xe8,
	0x20, 0x7e, 0x0e, 0xc7, 0x5f, 0x69, 0xd1, 0xf4, 0x15, 0xdb, 0xd1, 0xa3, 0x43, 0xfb, 0x83, 0xbb,
	0x48, 0xaf, 0x7a, 0x65, 0xbc, 0x44, 0xfe, 0xe2, 0x4f, 0xfa, 0x25, 0x2b, 0x98, 0x62, 0xff, 0x49,
	0xff, 0xf0, 0x4e, 0xfa, 0xe9, 0x3e, 0xd6, 0xc5, 0x9b, 0x1f, 0x3b, 0x17, 0xfd, 0xdc, 0xb9, 0xe8,
	0xd7, 0xce, 0x45, 0xdf, 0x6e, 0xdd, 0xa3, 0x4f, 0xe7, 0xdb, 0x5c, 0x5d, 0x37, 0x49, 0x98, 0xf2,
	0x72, 0x5e, 0x53, 0x41, 0x25, 0x6f, 0x44, 0xca, 0xe6, 0xe2, 0x9a, 0xcb, 0x46, 0xee, 0x3f, 0x75,
	0x32, 0x1f, 0xe3, 0x25, 0x13, 0xfd, 0xcb, 0xbd, 0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x17,
	0x85, 0x37, 0x83, 0x02, 0x00, 0x00,
}

func (m *JournalRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JournalRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JournalRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timestamp != 0 {
		i = encodeVarintJournal(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintJournal(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintJournal(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != nil {
		{
			size, err := m.Uid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJournal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JournalRecord_UID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JournalRecord_UID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JournalRecord_UID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Clock != 0 {
		i = encodeVarintJournal(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *OffsetRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OffsetRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OffsetRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.To != 0 {
		i = encodeVarintJournal(dAtA, i, uint64(m.To))
		i--
		dAtA[i] = 0x10
	}
	if m.From != 0 {
		i = encodeVarintJournal(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *JournalAssign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JournalAssign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JournalAssign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Blocks) > 0 {
		for k := range m.Blocks {
			v := m.Blocks[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintJournal(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintJournal(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintJournal(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NodeUid) > 0 {
		i -= len(m.NodeUid)
		copy(dAtA[i:], m.NodeUid)
		i = encodeVarintJournal(dAtA, i, uint64(len(m.NodeUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JournalDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JournalDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JournalDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Blocks[iNdEx])
			copy(dAtA[i:], m.Blocks[iNdEx])
			i = encodeVarintJournal(dAtA, i, uint64(len(m.Blocks[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NodeUid) > 0 {
		i -= len(m.NodeUid)
		copy(dAtA[i:], m.NodeUid)
		i = encodeVarintJournal(dAtA, i, uint64(len(m.NodeUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintJournal(dAtA []byte, offset int, v uint64) int {
	offset -= sovJournal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JournalRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != nil {
		l = m.Uid.Size()
		n += 1 + l + sovJournal(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovJournal(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovJournal(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovJournal(uint64(m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JournalRecord_UID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Clock != 0 {
		n += 1 + sovJournal(uint64(m.Clock))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OffsetRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovJournal(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovJournal(uint64(m.To))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JournalAssign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeUid)
	if l > 0 {
		n += 1 + l + sovJournal(uint64(l))
	}
	if len(m.Blocks) > 0 {
		for k, v := range m.Blocks {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovJournal(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovJournal(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovJournal(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JournalDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeUid)
	if l > 0 {
		n += 1 + l + sovJournal(uint64(l))
	}
	if len(m.Blocks) > 0 {
		for _, s := range m.Blocks {
			l = len(s)
			n += 1 + l + sovJournal(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovJournal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozJournal(x uint64) (n int) {
	return sovJournal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JournalRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJournal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JournalRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JournalRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJournal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJournal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJournal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uid == nil {
				m.Uid = &JournalRecord_UID{}
			}
			if err := m.Uid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJournal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= JournalRecord_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJournal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJournal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthJournal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJournal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipJournal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJournal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JournalRecord_UID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJournal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJournal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipJournal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJournal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OffsetRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJournal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OffsetRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OffsetRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJournal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJournal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipJournal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJournal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JournalAssign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJournal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JournalAssign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JournalAssign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJournal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJournal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJournal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJournal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJournal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJournal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blocks == nil {
				m.Blocks = make(map[string]*OffsetRange)
			}
			var mapkey string
			var mapvalue *OffsetRange
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowJournal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowJournal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthJournal
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthJournal
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowJournal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthJournal
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthJournal
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &OffsetRange{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipJournal(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthJournal
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Blocks[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJournal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJournal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JournalDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJournal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JournalDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JournalDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJournal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJournal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJournal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJournal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJournal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJournal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJournal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJournal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJournal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJournal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJournal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJournal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJournal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupJournal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthJournal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthJournal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJournal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupJournal = fmt.Errorf("proto: unexpected end of group")
)
