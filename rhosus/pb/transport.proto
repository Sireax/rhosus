syntax = "proto3";

package transport_pb;
option go_package = "github.com/rhosus/rhosus/pb/transport_pb";

import "fs.proto";

service TransportService {
  rpc Ping (PingRequest) returns (PingResponse);
  rpc ShutdownNode (ShutdownNodeRequest) returns (ShutdownNodeResponse);

  rpc GetBlocks(GetBlocksRequest) returns (stream GetBlocksResponse);
  rpc AssignBlocks (stream AssignBlockRequest) returns (AssignBlocksResponse);
  rpc RemoveBlocks (RemoveBlocksRequest) returns (RemoveBlocksResponse);
  rpc PlacePartition(stream PlacePartitionRequest) returns (PlacePartitionResponse);
  rpc GetPartition(stream GetPartitionRequest) returns (stream GetPartitionResponse);
  rpc RemovePartition(stream RemovePartitionRequest) returns (stream RemovePartitionResponse);

  rpc FetchMetrics(FetchMetricsRequest) returns (FetchMetricsResponse);
}

message PingRequest {}

message PingResponse{}

// In case we need to shutdown node by a registry

message ShutdownNodeRequest {
  string name = 1;
  enum ShutdownReason {
    SHUTDOWN_NORMAL = 0;
    SHUTDOWN_ERROR = 1;
    SHUTDOWN_FORCE = 2;
  }
  ShutdownReason reason = 2;
}

message ShutdownNodeResponse {}


message GetBlocksRequest {
  repeated BlockPlacementInfo blocks = 1;
}

message GetBlocksResponse {
  fs_pb.Block block = 1;
}

message AssignBlockRequest {
  fs_pb.Block block = 1;
}

message AssignBlocksResponse {
  repeated BlockPlacementInfo placement = 1;
}

message BlockPlacementInfo {
  string blockID = 1;
  string partitionID = 2;
  bool success = 3;
  string error = 4;
}

message RemoveBlocksRequest {
  repeated string ids = 1;
}

message RemoveBlocksResponse {}

message PlacePartitionRequest {
}

message PlacePartitionResponse {}

message GetPartitionRequest {
}

message GetPartitionResponse {}

message RemovePartitionRequest {
}

message RemovePartitionResponse {}



message FetchMetricsRequest {}

message FetchMetricsResponse {
  string name = 1;
  NodeMetrics metrics = 2;
}

message NodeMetrics {
  uint64 capacity = 1;
  uint64 remaining = 2;
  float usedPercent = 3;
  int64 lastUpdate = 4;
  uint64 cacheCapacity = 5;
  uint64 cacheUsed = 6;
  float memUsedPercent = 7;
}

///////////////////////////////
// All information about node
// that registry needs
message NodeInfo {
  string id = 1;
  string name = 2;
  message Address {
    string host = 1;
    string port = 2;
  }
  Address address = 3;
  string location = 4;
  enum State {
    NORMAL = 0;
    DECOMMISSION_IN_PROGRESS = 1;
    DECOMMISSIONED = 2;
  }
  State state = 5;
  int32 pagesCapacity = 6;
  NodeMetrics metrics = 7;
}


