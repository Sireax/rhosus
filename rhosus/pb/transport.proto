syntax = "proto3";

package transport_pb;
option go_package = "github.com/rhosus/rhosus/pb/transport_pb";

import "fs.proto";

// Transport is used by registries to
// connect to DataNodes. DataNode is basically
// under full control of registry, so this service
// implements all necessary calls

service TransportService {
  rpc Heartbeat (HeartbeatRequest) returns (HeartbeatResponse);
  rpc ShutdownNode (ShutdownNodeRequest) returns (ShutdownNodeResponse);

  rpc GetBlocks(GetBlocksRequest) returns (stream GetBlocksResponse);
  rpc AssignBlocks (stream AssignBlockRequest) returns (AssignBlocksResponse);
  rpc RemoveBlocks (RemoveBlocksRequest) returns (RemoveBlocksResponse);
  rpc PlacePartition(stream PlacePartitionRequest) returns (PlacePartitionResponse);
  rpc GetPartition(GetPartitionRequest) returns (stream GetPartitionResponse);
  rpc RemovePartition(RemovePartitionRequest) returns (RemovePartitionResponse);
}

message HeartbeatRequest {}

message HeartbeatResponse{
  string name = 1;
  NodeMetrics metrics = 2;
  uint64 latency = 3;
}

// In case we need to shutdown node by a registry

message ShutdownNodeRequest {
  string name = 1;
  enum ShutdownReason {
    SHUTDOWN_NORMAL = 0;
    SHUTDOWN_ERROR = 1;
    SHUTDOWN_FORCE = 2;
  }
  ShutdownReason reason = 2;
}

message ShutdownNodeResponse {}


message GetBlocksRequest {
  repeated BlockPlacementInfo blocks = 1;
}

message GetBlocksResponse {
  fs_pb.Block block = 1;
}

message AssignBlockRequest {
  fs_pb.Block block = 1;
}

message AssignBlocksResponse {
  repeated BlockPlacementInfo placement = 1;
}

message BlockPlacementInfo {
  string blockID = 1;
  string partitionID = 2;
  bool success = 3;
  string error = 4;
}

message RemoveBlocksRequest {
  repeated BlockPlacementInfo blocks = 1;
}

message RemoveBlocksResponse {
  bool success = 1;
  string error = 2;
}

message PlacePartitionRequest {
}

message PlacePartitionResponse {}

message GetPartitionRequest {
}

message GetPartitionResponse {}

message RemovePartitionRequest {
}

message RemovePartitionResponse {}


message FetchMetricsRequest {}

message FetchMetricsResponse {
  string name = 1;
  NodeMetrics metrics = 2;
}

message NodeMetrics {
  int32 blocksUsed = 1;
  int32 blocksRemaining = 2;
  int32 partitions = 3;
  uint64 diskCapacity = 4;
  uint64 diskRemaining = 5;
  float diskUsedPercent = 6;
  int64 lastUpdate = 7;
  uint64 cacheCapacity = 8;
  uint64 cacheUsed = 9;
  float memUsedPercent = 10;
}


///////////////////////////////
// All information about node
// that registry needs
message NodeInfo {
  string id = 1;
  string name = 2;
  string address = 3;
  string location = 4;
  enum State {
    NORMAL = 0;
    DECOMMISSION_IN_PROGRESS = 1;
    DECOMMISSIONED = 2;
  }
  State state = 5;
}


