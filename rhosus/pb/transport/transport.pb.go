// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transport.proto

package transport_pb

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	fs_pb "github.com/parasource/rhosus/rhosus/pb/fs_pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ShutdownNodeRequest_ShutdownReason int32

const (
	ShutdownNodeRequest_SHUTDOWN_NORMAL ShutdownNodeRequest_ShutdownReason = 0
	ShutdownNodeRequest_SHUTDOWN_ERROR  ShutdownNodeRequest_ShutdownReason = 1
	ShutdownNodeRequest_SHUTDOWN_FORCE  ShutdownNodeRequest_ShutdownReason = 2
)

var ShutdownNodeRequest_ShutdownReason_name = map[int32]string{
	0: "SHUTDOWN_NORMAL",
	1: "SHUTDOWN_ERROR",
	2: "SHUTDOWN_FORCE",
}

var ShutdownNodeRequest_ShutdownReason_value = map[string]int32{
	"SHUTDOWN_NORMAL": 0,
	"SHUTDOWN_ERROR":  1,
	"SHUTDOWN_FORCE":  2,
}

func (x ShutdownNodeRequest_ShutdownReason) String() string {
	return proto.EnumName(ShutdownNodeRequest_ShutdownReason_name, int32(x))
}

func (ShutdownNodeRequest_ShutdownReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{2, 0}
}

type NodeInfo_State int32

const (
	NodeInfo_NORMAL                   NodeInfo_State = 0
	NodeInfo_DECOMMISSION_IN_PROGRESS NodeInfo_State = 1
	NodeInfo_DECOMMISSIONED           NodeInfo_State = 2
)

var NodeInfo_State_name = map[int32]string{
	0: "NORMAL",
	1: "DECOMMISSION_IN_PROGRESS",
	2: "DECOMMISSIONED",
}

var NodeInfo_State_value = map[string]int32{
	"NORMAL":                   0,
	"DECOMMISSION_IN_PROGRESS": 1,
	"DECOMMISSIONED":           2,
}

func (x NodeInfo_State) String() string {
	return proto.EnumName(NodeInfo_State_name, int32(x))
}

func (NodeInfo_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{20, 0}
}

type HeartbeatRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartbeatRequest) Reset()         { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()    {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{0}
}
func (m *HeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartbeatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatRequest.Merge(m, src)
}
func (m *HeartbeatRequest) XXX_Size() int {
	return m.Size()
}
func (m *HeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatRequest proto.InternalMessageInfo

type HeartbeatResponse struct {
	Name                 string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Metrics              *NodeMetrics `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Latency              uint64       `protobuf:"varint,3,opt,name=latency,proto3" json:"latency,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *HeartbeatResponse) Reset()         { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string { return proto.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()    {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{1}
}
func (m *HeartbeatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartbeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartbeatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeartbeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatResponse.Merge(m, src)
}
func (m *HeartbeatResponse) XXX_Size() int {
	return m.Size()
}
func (m *HeartbeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatResponse proto.InternalMessageInfo

func (m *HeartbeatResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HeartbeatResponse) GetMetrics() *NodeMetrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *HeartbeatResponse) GetLatency() uint64 {
	if m != nil {
		return m.Latency
	}
	return 0
}

type ShutdownNodeRequest struct {
	Name                 string                             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Reason               ShutdownNodeRequest_ShutdownReason `protobuf:"varint,2,opt,name=reason,proto3,enum=transport_pb.ShutdownNodeRequest_ShutdownReason" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *ShutdownNodeRequest) Reset()         { *m = ShutdownNodeRequest{} }
func (m *ShutdownNodeRequest) String() string { return proto.CompactTextString(m) }
func (*ShutdownNodeRequest) ProtoMessage()    {}
func (*ShutdownNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{2}
}
func (m *ShutdownNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShutdownNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShutdownNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShutdownNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShutdownNodeRequest.Merge(m, src)
}
func (m *ShutdownNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ShutdownNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShutdownNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShutdownNodeRequest proto.InternalMessageInfo

func (m *ShutdownNodeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ShutdownNodeRequest) GetReason() ShutdownNodeRequest_ShutdownReason {
	if m != nil {
		return m.Reason
	}
	return ShutdownNodeRequest_SHUTDOWN_NORMAL
}

type ShutdownNodeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShutdownNodeResponse) Reset()         { *m = ShutdownNodeResponse{} }
func (m *ShutdownNodeResponse) String() string { return proto.CompactTextString(m) }
func (*ShutdownNodeResponse) ProtoMessage()    {}
func (*ShutdownNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{3}
}
func (m *ShutdownNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShutdownNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShutdownNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShutdownNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShutdownNodeResponse.Merge(m, src)
}
func (m *ShutdownNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ShutdownNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShutdownNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShutdownNodeResponse proto.InternalMessageInfo

type GetBlocksRequest struct {
	Blocks               []*BlockPlacementInfo `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetBlocksRequest) Reset()         { *m = GetBlocksRequest{} }
func (m *GetBlocksRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlocksRequest) ProtoMessage()    {}
func (*GetBlocksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{4}
}
func (m *GetBlocksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlocksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlocksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlocksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlocksRequest.Merge(m, src)
}
func (m *GetBlocksRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBlocksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlocksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlocksRequest proto.InternalMessageInfo

func (m *GetBlocksRequest) GetBlocks() []*BlockPlacementInfo {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type GetBlocksResponse struct {
	Block                *fs_pb.Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetBlocksResponse) Reset()         { *m = GetBlocksResponse{} }
func (m *GetBlocksResponse) String() string { return proto.CompactTextString(m) }
func (*GetBlocksResponse) ProtoMessage()    {}
func (*GetBlocksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{5}
}
func (m *GetBlocksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlocksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlocksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlocksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlocksResponse.Merge(m, src)
}
func (m *GetBlocksResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBlocksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlocksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlocksResponse proto.InternalMessageInfo

func (m *GetBlocksResponse) GetBlock() *fs_pb.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type AssignBlockRequest struct {
	Block                *fs_pb.Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AssignBlockRequest) Reset()         { *m = AssignBlockRequest{} }
func (m *AssignBlockRequest) String() string { return proto.CompactTextString(m) }
func (*AssignBlockRequest) ProtoMessage()    {}
func (*AssignBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{6}
}
func (m *AssignBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignBlockRequest.Merge(m, src)
}
func (m *AssignBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *AssignBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssignBlockRequest proto.InternalMessageInfo

func (m *AssignBlockRequest) GetBlock() *fs_pb.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type AssignBlocksResponse struct {
	Placement            []*BlockPlacementInfo `protobuf:"bytes,1,rep,name=placement,proto3" json:"placement,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *AssignBlocksResponse) Reset()         { *m = AssignBlocksResponse{} }
func (m *AssignBlocksResponse) String() string { return proto.CompactTextString(m) }
func (*AssignBlocksResponse) ProtoMessage()    {}
func (*AssignBlocksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{7}
}
func (m *AssignBlocksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignBlocksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignBlocksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignBlocksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignBlocksResponse.Merge(m, src)
}
func (m *AssignBlocksResponse) XXX_Size() int {
	return m.Size()
}
func (m *AssignBlocksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignBlocksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssignBlocksResponse proto.InternalMessageInfo

func (m *AssignBlocksResponse) GetPlacement() []*BlockPlacementInfo {
	if m != nil {
		return m.Placement
	}
	return nil
}

type BlockPlacementInfo struct {
	BlockID              string   `protobuf:"bytes,1,opt,name=blockID,proto3" json:"blockID,omitempty"`
	PartitionID          string   `protobuf:"bytes,2,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	Success              bool     `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Error                string   `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockPlacementInfo) Reset()         { *m = BlockPlacementInfo{} }
func (m *BlockPlacementInfo) String() string { return proto.CompactTextString(m) }
func (*BlockPlacementInfo) ProtoMessage()    {}
func (*BlockPlacementInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{8}
}
func (m *BlockPlacementInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockPlacementInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockPlacementInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockPlacementInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockPlacementInfo.Merge(m, src)
}
func (m *BlockPlacementInfo) XXX_Size() int {
	return m.Size()
}
func (m *BlockPlacementInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockPlacementInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BlockPlacementInfo proto.InternalMessageInfo

func (m *BlockPlacementInfo) GetBlockID() string {
	if m != nil {
		return m.BlockID
	}
	return ""
}

func (m *BlockPlacementInfo) GetPartitionID() string {
	if m != nil {
		return m.PartitionID
	}
	return ""
}

func (m *BlockPlacementInfo) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *BlockPlacementInfo) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type RemoveBlocksRequest struct {
	Blocks               []*BlockPlacementInfo `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RemoveBlocksRequest) Reset()         { *m = RemoveBlocksRequest{} }
func (m *RemoveBlocksRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveBlocksRequest) ProtoMessage()    {}
func (*RemoveBlocksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{9}
}
func (m *RemoveBlocksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveBlocksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveBlocksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveBlocksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveBlocksRequest.Merge(m, src)
}
func (m *RemoveBlocksRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveBlocksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveBlocksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveBlocksRequest proto.InternalMessageInfo

func (m *RemoveBlocksRequest) GetBlocks() []*BlockPlacementInfo {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type RemoveBlocksResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveBlocksResponse) Reset()         { *m = RemoveBlocksResponse{} }
func (m *RemoveBlocksResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveBlocksResponse) ProtoMessage()    {}
func (*RemoveBlocksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{10}
}
func (m *RemoveBlocksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveBlocksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveBlocksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveBlocksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveBlocksResponse.Merge(m, src)
}
func (m *RemoveBlocksResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveBlocksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveBlocksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveBlocksResponse proto.InternalMessageInfo

func (m *RemoveBlocksResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RemoveBlocksResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type PlacePartitionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlacePartitionRequest) Reset()         { *m = PlacePartitionRequest{} }
func (m *PlacePartitionRequest) String() string { return proto.CompactTextString(m) }
func (*PlacePartitionRequest) ProtoMessage()    {}
func (*PlacePartitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{11}
}
func (m *PlacePartitionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlacePartitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlacePartitionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlacePartitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlacePartitionRequest.Merge(m, src)
}
func (m *PlacePartitionRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlacePartitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlacePartitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlacePartitionRequest proto.InternalMessageInfo

type PlacePartitionResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlacePartitionResponse) Reset()         { *m = PlacePartitionResponse{} }
func (m *PlacePartitionResponse) String() string { return proto.CompactTextString(m) }
func (*PlacePartitionResponse) ProtoMessage()    {}
func (*PlacePartitionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{12}
}
func (m *PlacePartitionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlacePartitionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlacePartitionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlacePartitionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlacePartitionResponse.Merge(m, src)
}
func (m *PlacePartitionResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlacePartitionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlacePartitionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlacePartitionResponse proto.InternalMessageInfo

type GetPartitionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPartitionRequest) Reset()         { *m = GetPartitionRequest{} }
func (m *GetPartitionRequest) String() string { return proto.CompactTextString(m) }
func (*GetPartitionRequest) ProtoMessage()    {}
func (*GetPartitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{13}
}
func (m *GetPartitionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPartitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPartitionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPartitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPartitionRequest.Merge(m, src)
}
func (m *GetPartitionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPartitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPartitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPartitionRequest proto.InternalMessageInfo

type GetPartitionResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPartitionResponse) Reset()         { *m = GetPartitionResponse{} }
func (m *GetPartitionResponse) String() string { return proto.CompactTextString(m) }
func (*GetPartitionResponse) ProtoMessage()    {}
func (*GetPartitionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{14}
}
func (m *GetPartitionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPartitionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPartitionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPartitionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPartitionResponse.Merge(m, src)
}
func (m *GetPartitionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPartitionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPartitionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPartitionResponse proto.InternalMessageInfo

type RemovePartitionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemovePartitionRequest) Reset()         { *m = RemovePartitionRequest{} }
func (m *RemovePartitionRequest) String() string { return proto.CompactTextString(m) }
func (*RemovePartitionRequest) ProtoMessage()    {}
func (*RemovePartitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{15}
}
func (m *RemovePartitionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePartitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePartitionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovePartitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePartitionRequest.Merge(m, src)
}
func (m *RemovePartitionRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemovePartitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePartitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePartitionRequest proto.InternalMessageInfo

type RemovePartitionResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemovePartitionResponse) Reset()         { *m = RemovePartitionResponse{} }
func (m *RemovePartitionResponse) String() string { return proto.CompactTextString(m) }
func (*RemovePartitionResponse) ProtoMessage()    {}
func (*RemovePartitionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{16}
}
func (m *RemovePartitionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePartitionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePartitionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovePartitionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePartitionResponse.Merge(m, src)
}
func (m *RemovePartitionResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemovePartitionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePartitionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePartitionResponse proto.InternalMessageInfo

type FetchMetricsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchMetricsRequest) Reset()         { *m = FetchMetricsRequest{} }
func (m *FetchMetricsRequest) String() string { return proto.CompactTextString(m) }
func (*FetchMetricsRequest) ProtoMessage()    {}
func (*FetchMetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{17}
}
func (m *FetchMetricsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchMetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchMetricsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchMetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchMetricsRequest.Merge(m, src)
}
func (m *FetchMetricsRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchMetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchMetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchMetricsRequest proto.InternalMessageInfo

type FetchMetricsResponse struct {
	Name                 string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Metrics              *NodeMetrics `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *FetchMetricsResponse) Reset()         { *m = FetchMetricsResponse{} }
func (m *FetchMetricsResponse) String() string { return proto.CompactTextString(m) }
func (*FetchMetricsResponse) ProtoMessage()    {}
func (*FetchMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{18}
}
func (m *FetchMetricsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchMetricsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchMetricsResponse.Merge(m, src)
}
func (m *FetchMetricsResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchMetricsResponse proto.InternalMessageInfo

func (m *FetchMetricsResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FetchMetricsResponse) GetMetrics() *NodeMetrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type NodeMetrics struct {
	BlocksUsed           int32    `protobuf:"varint,1,opt,name=blocksUsed,proto3" json:"blocksUsed,omitempty"`
	BlocksRemaining      int32    `protobuf:"varint,2,opt,name=blocksRemaining,proto3" json:"blocksRemaining,omitempty"`
	Partitions           int32    `protobuf:"varint,3,opt,name=partitions,proto3" json:"partitions,omitempty"`
	DiskCapacity         uint64   `protobuf:"varint,4,opt,name=diskCapacity,proto3" json:"diskCapacity,omitempty"`
	DiskRemaining        uint64   `protobuf:"varint,5,opt,name=diskRemaining,proto3" json:"diskRemaining,omitempty"`
	DiskUsedPercent      float32  `protobuf:"fixed32,6,opt,name=diskUsedPercent,proto3" json:"diskUsedPercent,omitempty"`
	LastUpdate           int64    `protobuf:"varint,7,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	CacheCapacity        uint64   `protobuf:"varint,8,opt,name=cacheCapacity,proto3" json:"cacheCapacity,omitempty"`
	CacheUsed            uint64   `protobuf:"varint,9,opt,name=cacheUsed,proto3" json:"cacheUsed,omitempty"`
	MemUsedPercent       float32  `protobuf:"fixed32,10,opt,name=memUsedPercent,proto3" json:"memUsedPercent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeMetrics) Reset()         { *m = NodeMetrics{} }
func (m *NodeMetrics) String() string { return proto.CompactTextString(m) }
func (*NodeMetrics) ProtoMessage()    {}
func (*NodeMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{19}
}
func (m *NodeMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMetrics.Merge(m, src)
}
func (m *NodeMetrics) XXX_Size() int {
	return m.Size()
}
func (m *NodeMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMetrics proto.InternalMessageInfo

func (m *NodeMetrics) GetBlocksUsed() int32 {
	if m != nil {
		return m.BlocksUsed
	}
	return 0
}

func (m *NodeMetrics) GetBlocksRemaining() int32 {
	if m != nil {
		return m.BlocksRemaining
	}
	return 0
}

func (m *NodeMetrics) GetPartitions() int32 {
	if m != nil {
		return m.Partitions
	}
	return 0
}

func (m *NodeMetrics) GetDiskCapacity() uint64 {
	if m != nil {
		return m.DiskCapacity
	}
	return 0
}

func (m *NodeMetrics) GetDiskRemaining() uint64 {
	if m != nil {
		return m.DiskRemaining
	}
	return 0
}

func (m *NodeMetrics) GetDiskUsedPercent() float32 {
	if m != nil {
		return m.DiskUsedPercent
	}
	return 0
}

func (m *NodeMetrics) GetLastUpdate() int64 {
	if m != nil {
		return m.LastUpdate
	}
	return 0
}

func (m *NodeMetrics) GetCacheCapacity() uint64 {
	if m != nil {
		return m.CacheCapacity
	}
	return 0
}

func (m *NodeMetrics) GetCacheUsed() uint64 {
	if m != nil {
		return m.CacheUsed
	}
	return 0
}

func (m *NodeMetrics) GetMemUsedPercent() float32 {
	if m != nil {
		return m.MemUsedPercent
	}
	return 0
}

// /////////////////////////////
// All information about node
// that registry needs
type NodeInfo struct {
	Id                   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Address              string         `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Location             string         `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	State                NodeInfo_State `protobuf:"varint,5,opt,name=state,proto3,enum=transport_pb.NodeInfo_State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97e32c760ec1b28, []int{20}
}
func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(m, src)
}
func (m *NodeInfo) XXX_Size() int {
	return m.Size()
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NodeInfo) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *NodeInfo) GetState() NodeInfo_State {
	if m != nil {
		return m.State
	}
	return NodeInfo_NORMAL
}

func init() {
	proto.RegisterEnum("transport_pb.ShutdownNodeRequest_ShutdownReason", ShutdownNodeRequest_ShutdownReason_name, ShutdownNodeRequest_ShutdownReason_value)
	proto.RegisterEnum("transport_pb.NodeInfo_State", NodeInfo_State_name, NodeInfo_State_value)
	proto.RegisterType((*HeartbeatRequest)(nil), "transport_pb.HeartbeatRequest")
	proto.RegisterType((*HeartbeatResponse)(nil), "transport_pb.HeartbeatResponse")
	proto.RegisterType((*ShutdownNodeRequest)(nil), "transport_pb.ShutdownNodeRequest")
	proto.RegisterType((*ShutdownNodeResponse)(nil), "transport_pb.ShutdownNodeResponse")
	proto.RegisterType((*GetBlocksRequest)(nil), "transport_pb.GetBlocksRequest")
	proto.RegisterType((*GetBlocksResponse)(nil), "transport_pb.GetBlocksResponse")
	proto.RegisterType((*AssignBlockRequest)(nil), "transport_pb.AssignBlockRequest")
	proto.RegisterType((*AssignBlocksResponse)(nil), "transport_pb.AssignBlocksResponse")
	proto.RegisterType((*BlockPlacementInfo)(nil), "transport_pb.BlockPlacementInfo")
	proto.RegisterType((*RemoveBlocksRequest)(nil), "transport_pb.RemoveBlocksRequest")
	proto.RegisterType((*RemoveBlocksResponse)(nil), "transport_pb.RemoveBlocksResponse")
	proto.RegisterType((*PlacePartitionRequest)(nil), "transport_pb.PlacePartitionRequest")
	proto.RegisterType((*PlacePartitionResponse)(nil), "transport_pb.PlacePartitionResponse")
	proto.RegisterType((*GetPartitionRequest)(nil), "transport_pb.GetPartitionRequest")
	proto.RegisterType((*GetPartitionResponse)(nil), "transport_pb.GetPartitionResponse")
	proto.RegisterType((*RemovePartitionRequest)(nil), "transport_pb.RemovePartitionRequest")
	proto.RegisterType((*RemovePartitionResponse)(nil), "transport_pb.RemovePartitionResponse")
	proto.RegisterType((*FetchMetricsRequest)(nil), "transport_pb.FetchMetricsRequest")
	proto.RegisterType((*FetchMetricsResponse)(nil), "transport_pb.FetchMetricsResponse")
	proto.RegisterType((*NodeMetrics)(nil), "transport_pb.NodeMetrics")
	proto.RegisterType((*NodeInfo)(nil), "transport_pb.NodeInfo")
}

func init() { proto.RegisterFile("transport.proto", fileDescriptor_a97e32c760ec1b28) }

var fileDescriptor_a97e32c760ec1b28 = []byte{
	// 959 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0xdb, 0xc6,
	0x13, 0xcf, 0xd2, 0xa6, 0x2c, 0x8d, 0xf4, 0x97, 0x95, 0xb5, 0xe2, 0x30, 0x82, 0xa1, 0xbf, 0xca,
	0xba, 0x05, 0x4f, 0x8a, 0xa1, 0x1c, 0x1a, 0xf4, 0x50, 0x20, 0xb1, 0x64, 0x5b, 0x80, 0x25, 0x19,
	0xab, 0x38, 0x01, 0x0a, 0xb4, 0x02, 0x45, 0xae, 0x2d, 0x22, 0x12, 0xc9, 0x72, 0x57, 0x2e, 0x72,
	0xeb, 0x63, 0xf4, 0x79, 0x7a, 0xea, 0xa9, 0xe8, 0x1b, 0xb4, 0x70, 0x1f, 0xa2, 0xd7, 0x82, 0xcb,
	0x0f, 0x2d, 0x29, 0xe6, 0xe3, 0x90, 0x93, 0x34, 0xbf, 0xf9, 0xfa, 0xcd, 0xce, 0xee, 0x0c, 0x61,
	0x9f, 0x07, 0xa6, 0xcb, 0x7c, 0x2f, 0xe0, 0x5d, 0x3f, 0xf0, 0xb8, 0x87, 0x6b, 0x29, 0x30, 0xf3,
	0xe7, 0xad, 0xf2, 0x0d, 0x8b, 0x70, 0x1d, 0x43, 0xe3, 0x82, 0x9a, 0x01, 0x9f, 0x53, 0x93, 0x13,
	0xfa, 0xd3, 0x9a, 0x32, 0xae, 0xdf, 0xc1, 0x43, 0x09, 0x63, 0xbe, 0xe7, 0x32, 0x8a, 0x31, 0xec,
	0xba, 0xe6, 0x8a, 0x6a, 0xa8, 0x83, 0x8c, 0x0a, 0x11, 0xff, 0xf1, 0x33, 0xd8, 0x5b, 0x51, 0x1e,
	0x38, 0x16, 0xd3, 0x94, 0x0e, 0x32, 0xaa, 0xbd, 0x27, 0x5d, 0x39, 0x4d, 0x77, 0xec, 0xd9, 0x74,
	0x14, 0x19, 0x90, 0xc4, 0x12, 0x6b, 0xb0, 0xb7, 0x34, 0x39, 0x75, 0xad, 0x77, 0xda, 0x4e, 0x07,
	0x19, 0xbb, 0x24, 0x11, 0xf5, 0xdf, 0x10, 0x1c, 0x4c, 0x17, 0x6b, 0x6e, 0x7b, 0x3f, 0xbb, 0xa1,
	0x6b, 0xcc, 0xa7, 0x30, 0xf5, 0x05, 0x94, 0x02, 0x6a, 0x32, 0xcf, 0x15, 0x99, 0xeb, 0xbd, 0x93,
	0x6c, 0xe6, 0x82, 0x30, 0x29, 0x46, 0x84, 0x1f, 0x89, 0xfd, 0xf5, 0x11, 0xd4, 0xb3, 0x1a, 0x7c,
	0x00, 0xfb, 0xd3, 0x8b, 0xeb, 0x57, 0xfd, 0xc9, 0x9b, 0xf1, 0x6c, 0x3c, 0x21, 0xa3, 0x17, 0x97,
	0x8d, 0x07, 0x18, 0x43, 0x3d, 0x05, 0x07, 0x84, 0x4c, 0x48, 0x03, 0x65, 0xb0, 0xb3, 0x09, 0x39,
	0x1d, 0x34, 0x14, 0xfd, 0x10, 0x9a, 0xd9, 0xe4, 0xd1, 0xf9, 0xe9, 0x97, 0xd0, 0x38, 0xa7, 0xfc,
	0xe5, 0xd2, 0xb3, 0xde, 0xb2, 0xa4, 0xb0, 0xe7, 0x50, 0x9a, 0x0b, 0x40, 0x43, 0x9d, 0x1d, 0xa3,
	0xda, 0xeb, 0x64, 0x8b, 0x10, 0xc6, 0x57, 0x4b, 0xd3, 0xa2, 0x2b, 0xea, 0xf2, 0xa1, 0x7b, 0xe3,
	0x91, 0xd8, 0x5e, 0xff, 0x06, 0x1e, 0x4a, 0xd1, 0xe2, 0x16, 0xe9, 0xa0, 0x0a, 0xb5, 0x38, 0xa8,
	0x6a, 0xaf, 0xd6, 0xbd, 0x61, 0x69, 0x18, 0x12, 0xa9, 0xf4, 0xe7, 0x80, 0x5f, 0x30, 0xe6, 0xdc,
	0xba, 0x11, 0x1a, 0x13, 0xf9, 0x14, 0xcf, 0xd7, 0xd0, 0x94, 0x3c, 0x37, 0x59, 0xbf, 0x83, 0x8a,
	0x9f, 0x70, 0xfc, 0xe4, 0x3a, 0x36, 0x2e, 0xfa, 0x2f, 0x08, 0xf0, 0xb6, 0x45, 0x78, 0x4d, 0x44,
	0xde, 0x61, 0x3f, 0xee, 0x7b, 0x22, 0xe2, 0x0e, 0x54, 0x7d, 0x33, 0xe0, 0x0e, 0x77, 0x3c, 0x77,
	0xd8, 0x17, 0xfd, 0xaf, 0x10, 0x19, 0x0a, 0x7d, 0xd9, 0xda, 0xb2, 0x28, 0x63, 0xe2, 0x8a, 0x95,
	0x49, 0x22, 0xe2, 0x26, 0xa8, 0x34, 0x08, 0xbc, 0x40, 0xdb, 0x15, 0x5e, 0x91, 0xa0, 0x4f, 0xe0,
	0x80, 0xd0, 0x95, 0x77, 0x47, 0x3f, 0x57, 0x7b, 0xce, 0xa0, 0x99, 0x0d, 0x18, 0x9f, 0x95, 0x44,
	0x0c, 0xbd, 0x87, 0x98, 0x22, 0x13, 0x7b, 0x0c, 0x8f, 0x44, 0x82, 0xab, 0xa4, 0xb8, 0xe4, 0x89,
	0x6a, 0x70, 0x98, 0x57, 0xc4, 0xf7, 0xec, 0x11, 0x1c, 0x9c, 0x53, 0xbe, 0xe5, 0x70, 0x08, 0xcd,
	0x2c, 0x1c, 0x9b, 0x6b, 0x70, 0x18, 0x31, 0xdd, 0xf2, 0x78, 0x02, 0x8f, 0xb7, 0x34, 0x9b, 0x1c,
	0x67, 0x94, 0x5b, 0x8b, 0xe4, 0x6d, 0xc7, 0x1e, 0x33, 0x68, 0x66, 0xe1, 0xcf, 0x3c, 0x3a, 0xf4,
	0x7f, 0x15, 0xa8, 0x4a, 0x0a, 0xdc, 0x06, 0x88, 0x0e, 0xfc, 0x9a, 0x51, 0x5b, 0x84, 0x57, 0x89,
	0x84, 0x60, 0x03, 0xf6, 0xe7, 0x71, 0x03, 0x56, 0xa6, 0xe3, 0x3a, 0xee, 0xad, 0x48, 0xa6, 0x92,
	0x3c, 0x1c, 0x46, 0x4a, 0x2f, 0x50, 0x74, 0x69, 0x54, 0x22, 0x21, 0x58, 0x87, 0x9a, 0xed, 0xb0,
	0xb7, 0xa7, 0xa6, 0x6f, 0x5a, 0x0e, 0x7f, 0x27, 0xae, 0xcf, 0x2e, 0xc9, 0x60, 0xf8, 0x18, 0xfe,
	0x17, 0xca, 0x9b, 0x5c, 0xaa, 0x30, 0xca, 0x82, 0x21, 0xa7, 0x10, 0x08, 0xf9, 0x5d, 0xd1, 0xc0,
	0x0a, 0x1f, 0x4d, 0xa9, 0x83, 0x0c, 0x85, 0xe4, 0xe1, 0x90, 0xd3, 0xd2, 0x64, 0xfc, 0xda, 0xb7,
	0x4d, 0x4e, 0xb5, 0xbd, 0x0e, 0x32, 0x76, 0x88, 0x84, 0x84, 0xf9, 0x2c, 0xd3, 0x5a, 0xd0, 0x94,
	0x54, 0x39, 0xca, 0x97, 0x01, 0xf1, 0x11, 0x54, 0x04, 0x20, 0x8e, 0xa8, 0x22, 0x2c, 0x36, 0x00,
	0xfe, 0x1a, 0xea, 0x2b, 0xba, 0x92, 0xc9, 0x80, 0x20, 0x93, 0x43, 0xf5, 0xbf, 0x10, 0x94, 0xc3,
	0x93, 0x17, 0x4f, 0xb3, 0x0e, 0x8a, 0x63, 0xc7, 0xdd, 0x54, 0x1c, 0x3b, 0xed, 0xaf, 0x22, 0xf5,
	0x57, 0x83, 0x3d, 0xd3, 0xb6, 0x83, 0xe4, 0x09, 0x56, 0x48, 0x22, 0xe2, 0x16, 0x94, 0x97, 0x9e,
	0x65, 0x86, 0xe7, 0x1a, 0xbf, 0xc2, 0x54, 0xc6, 0x3d, 0x50, 0x19, 0x0f, 0xab, 0x55, 0xc5, 0x50,
	0x3f, 0xda, 0xbe, 0x13, 0x21, 0x81, 0xee, 0x34, 0xb4, 0x21, 0x91, 0xa9, 0x3e, 0x00, 0x55, 0xc8,
	0x18, 0xa0, 0x94, 0x4e, 0xeb, 0x23, 0xd0, 0xfa, 0x83, 0xd3, 0xc9, 0x68, 0x34, 0x9c, 0x4e, 0x87,
	0x93, 0xf1, 0x6c, 0x38, 0x9e, 0x5d, 0x91, 0xc9, 0x39, 0x19, 0x4c, 0xa7, 0xd1, 0xdc, 0x96, 0xb5,
	0x83, 0x7e, 0x43, 0xe9, 0xfd, 0xa1, 0x42, 0xe3, 0x55, 0x92, 0x6d, 0x4a, 0x83, 0x3b, 0xc7, 0xa2,
	0xf8, 0x12, 0x2a, 0xe9, 0x26, 0xc4, 0xed, 0x2c, 0x9b, 0xfc, 0xda, 0x6c, 0xfd, 0xff, 0xbd, 0xfa,
	0xf8, 0x1d, 0x5c, 0x43, 0x4d, 0x5e, 0x0d, 0xf8, 0x8b, 0x8f, 0xee, 0xac, 0x96, 0xfe, 0x21, 0x93,
	0x38, 0xec, 0x18, 0x2a, 0xe9, 0x2e, 0xc8, 0x93, 0xcc, 0xaf, 0x9c, 0x3c, 0xc9, 0xad, 0x25, 0x72,
	0x82, 0xf0, 0x6b, 0xa8, 0xc9, 0x83, 0x1e, 0xe7, 0xc6, 0xde, 0xf6, 0xfa, 0xc8, 0xb3, 0x2c, 0x5a,
	0x13, 0x06, 0x0a, 0xcb, 0x97, 0x87, 0x62, 0xbe, 0xfc, 0x82, 0x09, 0x9c, 0x0f, 0x5c, 0x38, 0x53,
	0x7f, 0x80, 0x7a, 0x76, 0x14, 0xe2, 0x2f, 0xb3, 0x5e, 0x85, 0x13, 0xb4, 0x75, 0xfc, 0x61, 0xa3,
	0x94, 0xf5, 0x1b, 0xa8, 0xc9, 0x83, 0x33, 0xcf, 0xba, 0x60, 0xd6, 0xe6, 0x59, 0x17, 0xcd, 0xdd,
	0x13, 0x84, 0x7f, 0x84, 0xfd, 0xdc, 0x7c, 0xc5, 0xc7, 0x45, 0xe5, 0x6e, 0x85, 0xff, 0xea, 0x23,
	0x56, 0x51, 0x86, 0x97, 0xdf, 0xfe, 0x7e, 0xdf, 0x46, 0x7f, 0xde, 0xb7, 0xd1, 0xdf, 0xf7, 0x6d,
	0xf4, 0xeb, 0x3f, 0xed, 0x07, 0xdf, 0x1b, 0xb7, 0x0e, 0x5f, 0xac, 0xe7, 0x5d, 0xcb, 0x5b, 0x3d,
	0x0d, 0x16, 0x1e, 0x5b, 0xb3, 0xe4, 0xc7, 0x9f, 0x3f, 0x95, 0x63, 0xce, 0x4b, 0xe2, 0xe3, 0xf0,
	0xd9, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xdf, 0x50, 0x6a, 0x47, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransportServiceClient is the client API for TransportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransportServiceClient interface {
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	ShutdownNode(ctx context.Context, in *ShutdownNodeRequest, opts ...grpc.CallOption) (*ShutdownNodeResponse, error)
	GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (TransportService_GetBlocksClient, error)
	AssignBlocks(ctx context.Context, opts ...grpc.CallOption) (TransportService_AssignBlocksClient, error)
	RemoveBlocks(ctx context.Context, in *RemoveBlocksRequest, opts ...grpc.CallOption) (*RemoveBlocksResponse, error)
	PlacePartition(ctx context.Context, opts ...grpc.CallOption) (TransportService_PlacePartitionClient, error)
	GetPartition(ctx context.Context, in *GetPartitionRequest, opts ...grpc.CallOption) (TransportService_GetPartitionClient, error)
	RemovePartition(ctx context.Context, in *RemovePartitionRequest, opts ...grpc.CallOption) (*RemovePartitionResponse, error)
}

type transportServiceClient struct {
	cc *grpc.ClientConn
}

func NewTransportServiceClient(cc *grpc.ClientConn) TransportServiceClient {
	return &transportServiceClient{cc}
}

func (c *transportServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/transport_pb.TransportService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) ShutdownNode(ctx context.Context, in *ShutdownNodeRequest, opts ...grpc.CallOption) (*ShutdownNodeResponse, error) {
	out := new(ShutdownNodeResponse)
	err := c.cc.Invoke(ctx, "/transport_pb.TransportService/ShutdownNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (TransportService_GetBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TransportService_serviceDesc.Streams[0], "/transport_pb.TransportService/GetBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &transportServiceGetBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransportService_GetBlocksClient interface {
	Recv() (*GetBlocksResponse, error)
	grpc.ClientStream
}

type transportServiceGetBlocksClient struct {
	grpc.ClientStream
}

func (x *transportServiceGetBlocksClient) Recv() (*GetBlocksResponse, error) {
	m := new(GetBlocksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transportServiceClient) AssignBlocks(ctx context.Context, opts ...grpc.CallOption) (TransportService_AssignBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TransportService_serviceDesc.Streams[1], "/transport_pb.TransportService/AssignBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &transportServiceAssignBlocksClient{stream}
	return x, nil
}

type TransportService_AssignBlocksClient interface {
	Send(*AssignBlockRequest) error
	CloseAndRecv() (*AssignBlocksResponse, error)
	grpc.ClientStream
}

type transportServiceAssignBlocksClient struct {
	grpc.ClientStream
}

func (x *transportServiceAssignBlocksClient) Send(m *AssignBlockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transportServiceAssignBlocksClient) CloseAndRecv() (*AssignBlocksResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AssignBlocksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transportServiceClient) RemoveBlocks(ctx context.Context, in *RemoveBlocksRequest, opts ...grpc.CallOption) (*RemoveBlocksResponse, error) {
	out := new(RemoveBlocksResponse)
	err := c.cc.Invoke(ctx, "/transport_pb.TransportService/RemoveBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServiceClient) PlacePartition(ctx context.Context, opts ...grpc.CallOption) (TransportService_PlacePartitionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TransportService_serviceDesc.Streams[2], "/transport_pb.TransportService/PlacePartition", opts...)
	if err != nil {
		return nil, err
	}
	x := &transportServicePlacePartitionClient{stream}
	return x, nil
}

type TransportService_PlacePartitionClient interface {
	Send(*PlacePartitionRequest) error
	CloseAndRecv() (*PlacePartitionResponse, error)
	grpc.ClientStream
}

type transportServicePlacePartitionClient struct {
	grpc.ClientStream
}

func (x *transportServicePlacePartitionClient) Send(m *PlacePartitionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transportServicePlacePartitionClient) CloseAndRecv() (*PlacePartitionResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PlacePartitionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transportServiceClient) GetPartition(ctx context.Context, in *GetPartitionRequest, opts ...grpc.CallOption) (TransportService_GetPartitionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TransportService_serviceDesc.Streams[3], "/transport_pb.TransportService/GetPartition", opts...)
	if err != nil {
		return nil, err
	}
	x := &transportServiceGetPartitionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransportService_GetPartitionClient interface {
	Recv() (*GetPartitionResponse, error)
	grpc.ClientStream
}

type transportServiceGetPartitionClient struct {
	grpc.ClientStream
}

func (x *transportServiceGetPartitionClient) Recv() (*GetPartitionResponse, error) {
	m := new(GetPartitionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transportServiceClient) RemovePartition(ctx context.Context, in *RemovePartitionRequest, opts ...grpc.CallOption) (*RemovePartitionResponse, error) {
	out := new(RemovePartitionResponse)
	err := c.cc.Invoke(ctx, "/transport_pb.TransportService/RemovePartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportServiceServer is the server API for TransportService service.
type TransportServiceServer interface {
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	ShutdownNode(context.Context, *ShutdownNodeRequest) (*ShutdownNodeResponse, error)
	GetBlocks(*GetBlocksRequest, TransportService_GetBlocksServer) error
	AssignBlocks(TransportService_AssignBlocksServer) error
	RemoveBlocks(context.Context, *RemoveBlocksRequest) (*RemoveBlocksResponse, error)
	PlacePartition(TransportService_PlacePartitionServer) error
	GetPartition(*GetPartitionRequest, TransportService_GetPartitionServer) error
	RemovePartition(context.Context, *RemovePartitionRequest) (*RemovePartitionResponse, error)
}

// UnimplementedTransportServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTransportServiceServer struct {
}

func (*UnimplementedTransportServiceServer) Heartbeat(ctx context.Context, req *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (*UnimplementedTransportServiceServer) ShutdownNode(ctx context.Context, req *ShutdownNodeRequest) (*ShutdownNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownNode not implemented")
}
func (*UnimplementedTransportServiceServer) GetBlocks(req *GetBlocksRequest, srv TransportService_GetBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (*UnimplementedTransportServiceServer) AssignBlocks(srv TransportService_AssignBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method AssignBlocks not implemented")
}
func (*UnimplementedTransportServiceServer) RemoveBlocks(ctx context.Context, req *RemoveBlocksRequest) (*RemoveBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlocks not implemented")
}
func (*UnimplementedTransportServiceServer) PlacePartition(srv TransportService_PlacePartitionServer) error {
	return status.Errorf(codes.Unimplemented, "method PlacePartition not implemented")
}
func (*UnimplementedTransportServiceServer) GetPartition(req *GetPartitionRequest, srv TransportService_GetPartitionServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPartition not implemented")
}
func (*UnimplementedTransportServiceServer) RemovePartition(ctx context.Context, req *RemovePartitionRequest) (*RemovePartitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePartition not implemented")
}

func RegisterTransportServiceServer(s *grpc.Server, srv TransportServiceServer) {
	s.RegisterService(&_TransportService_serviceDesc, srv)
}

func _TransportService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transport_pb.TransportService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_ShutdownNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).ShutdownNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transport_pb.TransportService/ShutdownNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).ShutdownNode(ctx, req.(*ShutdownNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_GetBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransportServiceServer).GetBlocks(m, &transportServiceGetBlocksServer{stream})
}

type TransportService_GetBlocksServer interface {
	Send(*GetBlocksResponse) error
	grpc.ServerStream
}

type transportServiceGetBlocksServer struct {
	grpc.ServerStream
}

func (x *transportServiceGetBlocksServer) Send(m *GetBlocksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TransportService_AssignBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransportServiceServer).AssignBlocks(&transportServiceAssignBlocksServer{stream})
}

type TransportService_AssignBlocksServer interface {
	SendAndClose(*AssignBlocksResponse) error
	Recv() (*AssignBlockRequest, error)
	grpc.ServerStream
}

type transportServiceAssignBlocksServer struct {
	grpc.ServerStream
}

func (x *transportServiceAssignBlocksServer) SendAndClose(m *AssignBlocksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transportServiceAssignBlocksServer) Recv() (*AssignBlockRequest, error) {
	m := new(AssignBlockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TransportService_RemoveBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).RemoveBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transport_pb.TransportService/RemoveBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).RemoveBlocks(ctx, req.(*RemoveBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportService_PlacePartition_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransportServiceServer).PlacePartition(&transportServicePlacePartitionServer{stream})
}

type TransportService_PlacePartitionServer interface {
	SendAndClose(*PlacePartitionResponse) error
	Recv() (*PlacePartitionRequest, error)
	grpc.ServerStream
}

type transportServicePlacePartitionServer struct {
	grpc.ServerStream
}

func (x *transportServicePlacePartitionServer) SendAndClose(m *PlacePartitionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transportServicePlacePartitionServer) Recv() (*PlacePartitionRequest, error) {
	m := new(PlacePartitionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TransportService_GetPartition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPartitionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransportServiceServer).GetPartition(m, &transportServiceGetPartitionServer{stream})
}

type TransportService_GetPartitionServer interface {
	Send(*GetPartitionResponse) error
	grpc.ServerStream
}

type transportServiceGetPartitionServer struct {
	grpc.ServerStream
}

func (x *transportServiceGetPartitionServer) Send(m *GetPartitionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TransportService_RemovePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServiceServer).RemovePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transport_pb.TransportService/RemovePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServiceServer).RemovePartition(ctx, req.(*RemovePartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transport_pb.TransportService",
	HandlerType: (*TransportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _TransportService_Heartbeat_Handler,
		},
		{
			MethodName: "ShutdownNode",
			Handler:    _TransportService_ShutdownNode_Handler,
		},
		{
			MethodName: "RemoveBlocks",
			Handler:    _TransportService_RemoveBlocks_Handler,
		},
		{
			MethodName: "RemovePartition",
			Handler:    _TransportService_RemovePartition_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlocks",
			Handler:       _TransportService_GetBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AssignBlocks",
			Handler:       _TransportService_AssignBlocks_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PlacePartition",
			Handler:       _TransportService_PlacePartition_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPartition",
			Handler:       _TransportService_GetPartition_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transport.proto",
}

func (m *HeartbeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeartbeatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *HeartbeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeartbeatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Latency != 0 {
		i = encodeVarintTransport(dAtA, i, uint64(m.Latency))
		i--
		dAtA[i] = 0x18
	}
	if m.Metrics != nil {
		{
			size, err := m.Metrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransport(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShutdownNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShutdownNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShutdownNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Reason != 0 {
		i = encodeVarintTransport(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShutdownNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShutdownNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShutdownNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetBlocksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlocksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlocksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransport(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetBlocksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlocksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlocksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransport(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssignBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransport(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssignBlocksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignBlocksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignBlocksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Placement) > 0 {
		for iNdEx := len(m.Placement) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Placement[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransport(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockPlacementInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockPlacementInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockPlacementInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x22
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.PartitionID) > 0 {
		i -= len(m.PartitionID)
		copy(dAtA[i:], m.PartitionID)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.PartitionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockID) > 0 {
		i -= len(m.BlockID)
		copy(dAtA[i:], m.BlockID)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.BlockID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveBlocksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveBlocksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveBlocksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransport(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RemoveBlocksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveBlocksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveBlocksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlacePartitionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlacePartitionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlacePartitionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *PlacePartitionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlacePartitionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlacePartitionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetPartitionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPartitionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPartitionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetPartitionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPartitionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPartitionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *RemovePartitionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePartitionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovePartitionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *RemovePartitionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePartitionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovePartitionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *FetchMetricsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchMetricsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchMetricsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *FetchMetricsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchMetricsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchMetricsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Metrics != nil {
		{
			size, err := m.Metrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransport(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MemUsedPercent != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MemUsedPercent))))
		i--
		dAtA[i] = 0x55
	}
	if m.CacheUsed != 0 {
		i = encodeVarintTransport(dAtA, i, uint64(m.CacheUsed))
		i--
		dAtA[i] = 0x48
	}
	if m.CacheCapacity != 0 {
		i = encodeVarintTransport(dAtA, i, uint64(m.CacheCapacity))
		i--
		dAtA[i] = 0x40
	}
	if m.LastUpdate != 0 {
		i = encodeVarintTransport(dAtA, i, uint64(m.LastUpdate))
		i--
		dAtA[i] = 0x38
	}
	if m.DiskUsedPercent != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DiskUsedPercent))))
		i--
		dAtA[i] = 0x35
	}
	if m.DiskRemaining != 0 {
		i = encodeVarintTransport(dAtA, i, uint64(m.DiskRemaining))
		i--
		dAtA[i] = 0x28
	}
	if m.DiskCapacity != 0 {
		i = encodeVarintTransport(dAtA, i, uint64(m.DiskCapacity))
		i--
		dAtA[i] = 0x20
	}
	if m.Partitions != 0 {
		i = encodeVarintTransport(dAtA, i, uint64(m.Partitions))
		i--
		dAtA[i] = 0x18
	}
	if m.BlocksRemaining != 0 {
		i = encodeVarintTransport(dAtA, i, uint64(m.BlocksRemaining))
		i--
		dAtA[i] = 0x10
	}
	if m.BlocksUsed != 0 {
		i = encodeVarintTransport(dAtA, i, uint64(m.BlocksUsed))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintTransport(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTransport(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransport(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HeartbeatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HeartbeatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	if m.Metrics != nil {
		l = m.Metrics.Size()
		n += 1 + l + sovTransport(uint64(l))
	}
	if m.Latency != 0 {
		n += 1 + sovTransport(uint64(m.Latency))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShutdownNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	if m.Reason != 0 {
		n += 1 + sovTransport(uint64(m.Reason))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShutdownNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBlocksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovTransport(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBlocksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovTransport(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AssignBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovTransport(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AssignBlocksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Placement) > 0 {
		for _, e := range m.Placement {
			l = e.Size()
			n += 1 + l + sovTransport(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockPlacementInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockID)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	l = len(m.PartitionID)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	if m.Success {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveBlocksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovTransport(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveBlocksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlacePartitionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlacePartitionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPartitionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPartitionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemovePartitionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemovePartitionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchMetricsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchMetricsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	if m.Metrics != nil {
		l = m.Metrics.Size()
		n += 1 + l + sovTransport(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlocksUsed != 0 {
		n += 1 + sovTransport(uint64(m.BlocksUsed))
	}
	if m.BlocksRemaining != 0 {
		n += 1 + sovTransport(uint64(m.BlocksRemaining))
	}
	if m.Partitions != 0 {
		n += 1 + sovTransport(uint64(m.Partitions))
	}
	if m.DiskCapacity != 0 {
		n += 1 + sovTransport(uint64(m.DiskCapacity))
	}
	if m.DiskRemaining != 0 {
		n += 1 + sovTransport(uint64(m.DiskRemaining))
	}
	if m.DiskUsedPercent != 0 {
		n += 5
	}
	if m.LastUpdate != 0 {
		n += 1 + sovTransport(uint64(m.LastUpdate))
	}
	if m.CacheCapacity != 0 {
		n += 1 + sovTransport(uint64(m.CacheCapacity))
	}
	if m.CacheUsed != 0 {
		n += 1 + sovTransport(uint64(m.CacheUsed))
	}
	if m.MemUsedPercent != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovTransport(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovTransport(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTransport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransport(x uint64) (n int) {
	return sovTransport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HeartbeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = &NodeMetrics{}
			}
			if err := m.Metrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latency", wireType)
			}
			m.Latency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Latency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShutdownNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShutdownNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShutdownNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= ShutdownNodeRequest_ShutdownReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShutdownNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShutdownNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShutdownNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlocksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlocksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlocksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &BlockPlacementInfo{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlocksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlocksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlocksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &fs_pb.Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &fs_pb.Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignBlocksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignBlocksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignBlocksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Placement = append(m.Placement, &BlockPlacementInfo{})
			if err := m.Placement[len(m.Placement)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockPlacementInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockPlacementInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockPlacementInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartitionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveBlocksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveBlocksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveBlocksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &BlockPlacementInfo{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveBlocksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveBlocksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveBlocksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlacePartitionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlacePartitionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlacePartitionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlacePartitionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlacePartitionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlacePartitionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPartitionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPartitionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPartitionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPartitionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPartitionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPartitionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePartitionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovePartitionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovePartitionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePartitionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovePartitionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovePartitionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchMetricsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchMetricsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchMetricsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchMetricsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchMetricsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchMetricsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = &NodeMetrics{}
			}
			if err := m.Metrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksUsed", wireType)
			}
			m.BlocksUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksUsed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksRemaining", wireType)
			}
			m.BlocksRemaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksRemaining |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
			m.Partitions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Partitions |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskCapacity", wireType)
			}
			m.DiskCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskCapacity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskRemaining", wireType)
			}
			m.DiskRemaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskRemaining |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskUsedPercent", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.DiskUsedPercent = float32(math.Float32frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdate", wireType)
			}
			m.LastUpdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheCapacity", wireType)
			}
			m.CacheCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CacheCapacity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheUsed", wireType)
			}
			m.CacheUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CacheUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemUsedPercent", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MemUsedPercent = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= NodeInfo_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransport
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransport
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransport
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransport        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransport          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransport = fmt.Errorf("proto: unexpected end of group")
)
